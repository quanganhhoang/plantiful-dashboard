import firebase from 'firebase/app';
import 'firebase/firestore';
import 'firebase/auth';
import 'firebase/storage';

const config = {
    apiKey: "AIzaSyD3ma60wNwlNWl3tdvvGIAG6uvSexQ76i8",
    authDomain: "plant-shop-2a5e9.firebaseapp.com",
    databaseURL: "https://plant-shop-2a5e9.firebaseio.com",
    projectId: "plant-shop-2a5e9",
    storageBucket: "plant-shop-2a5e9.appspot.com",
    messagingSenderId: "946760516962",
    appId: "1:946760516962:web:8d93b5dc8f6d81611fd83b",
    measurementId: "G-T0NQ3GGQ8T"
};

firebase.initializeApp(config);

export const auth = firebase.auth();
export const firestore = firebase.firestore();
export const storage = firebase.storage();

export const createUserProfileDocument = async (userAuth, additionalData) => {
    if (!userAuth) return;
    // queryReference vs. querySnapshot
    // documentReference vs collectionReference
    const userRef = firestore.doc(`users/${userAuth.uid}`);

    const snapShot = await userRef.get();

    if (!snapShot.exists) { // if user doesn't already exist
        const { displayName, email } = userAuth;
        const createdAt = new Date();
        try {
            await userRef.set({
                displayName,
                email,
                createdAt,
                ...additionalData
            });
        } catch (error) {
            console.log('error creating user', error.message);
        }
    }

    return userRef;
};

export const getCurrentUser = () => {
    return new Promise((resolve, reject) => {
        const unsubscribe = auth.onAuthStateChanged(userAuth => {
            unsubscribe();
            resolve(userAuth);
        }, reject);
    });
};

export const addCollectionAndDocuments = async (
    collectionKey,
    objectsToAdd
) => {
    const collectionRef = firestore.collection(collectionKey);

    const batch = firestore.batch();
    objectsToAdd.forEach(obj => {
        // make a new doc ref object with a key generated by firebase
        const newDocRef = collectionRef.doc();
        batch.set(newDocRef, obj);
    });

    return await batch.commit();
};

export const convertCollectionsSnapshotToMap = collections => {
    const transformedCollection = collections.docs.map(doc => {
        const { title, items } = doc.data();

        return {
            routeName: encodeURI(title.toLowerCase()),
            id: doc.id,
            title,
            items
        };
    });

    return transformedCollection.reduce((accumulator, collection) => {
        accumulator[collection.title.toLowerCase()] = collection;
        
        return accumulator;
    }, {});
};


export const addOrderRequest = async (userCredentials, cartItems, total) => {
    const collectionRef = firestore.collection('requests');

    const batch = firestore.batch();
    const newDocRef = collectionRef.doc();
    const obj = {
        ...userCredentials,
        cartItems,
        total,
        isCompleted: false,
        creationDate: new Date().toLocaleString(),
    };
    batch.set(newDocRef, obj);

    return await batch.commit();
};

export const viewAllOrders = async () => {
    const collectionRef = firestore.collection('orders');
    let orders = [];
    try {
        const snapshot = await collectionRef.get();
        if (snapshot.empty) {
            return;
        }
    
        snapshot.forEach(doc => {
            orders.push({
                id: doc.id,
                ...doc.data()
            });
        })
    } catch (err) {
        console.log(err);
    }

    return orders;
}

export const completeOrder = async (docId) => {
    const collectionRef = firestore.collection('orders');
    try {
        collectionRef.doc(docId).update({
            isCompleted: true
        });
    } catch (err) {
        console.log("Failed to complete order with id " + docId, err);
    }
}

export const cancelOrder = async (docId) => {
    const collectionRef = firestore.collection('orders');
    try {
        collectionRef.doc(docId).delete();
    } catch (err) {
        console.log("Failed to delete order with id " + docId, err);
    }
}

// sign in with Google
export const googleProvider = new firebase.auth.GoogleAuthProvider();
googleProvider.setCustomParameters({ prompt: 'select_account' });
export const signInWithGoogle = () => auth.signInWithPopup(googleProvider);

export default firebase;
