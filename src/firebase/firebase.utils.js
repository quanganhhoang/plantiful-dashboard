import firebase from 'firebase/app';
import 'firebase/firestore';
import 'firebase/auth';
import 'firebase/storage';

const config = {
    apiKey: "AIzaSyD3ma60wNwlNWl3tdvvGIAG6uvSexQ76i8",
    authDomain: "plant-shop-2a5e9.firebaseapp.com",
    databaseURL: "https://plant-shop-2a5e9.firebaseio.com",
    projectId: "plant-shop-2a5e9",
    storageBucket: "plant-shop-2a5e9.appspot.com",
    messagingSenderId: "946760516962",
    appId: "1:946760516962:web:8d93b5dc8f6d81611fd83b",
    measurementId: "G-T0NQ3GGQ8T"
};

firebase.initializeApp(config);

export const auth = firebase.auth();
export const firestore = firebase.firestore();
export const storage = firebase.storage();


export const addCollectionAndDocuments = async (
    collectionKey,
    objectsToAdd
) => {
    const collectionRef = firestore.collection(collectionKey);

    const batch = firestore.batch();
    objectsToAdd.forEach(obj => {
        // make a new doc ref object with a key generated by firebase
        const newDocRef = collectionRef.doc();
        batch.set(newDocRef, obj);
    });

    return await batch.commit();
};

export const convertCollectionsSnapshotToMap = collections => {
    const transformedCollection = collections.docs.map(doc => {
        const { title, items } = doc.data();

        return {
            routeName: encodeURI(title.toLowerCase()),
            id: doc.id,
            title,
            items
        };
    });

    return transformedCollection.reduce((accumulator, collection) => {
        accumulator[collection.title.toLowerCase()] = collection;
        
        return accumulator;
    }, {});
};


export const addOrderRequest = async (userCredentials, cartItems, total) => {
    const collectionRef = firestore.collection('requests');

    const batch = firestore.batch();
    const newDocRef = collectionRef.doc();
    const obj = {
        ...userCredentials,
        cartItems,
        total,
        isCompleted: false,
        creationDate: new Date().toLocaleString(),
    };
    batch.set(newDocRef, obj);

    return await batch.commit();
};


export const viewRequests = async () => {
    const collectionRef = firestore.collection('requests')

    try {
        const snapshot = await collectionRef.where('isCompleted', '==', false).get();
        console.log('snapshot', snapshot);
        if (snapshot.empty) {
            console.log('All requests are completed');
            return;
        }
    
        snapshot.forEach(doc => {
            console.log(doc.id, ' => ', doc.data())
        })
    } catch (err) {
        console.log(err);
    }
}

export const getImagesFromFirestore = async (plantName) => {
    const listRef = storage.ref('plant-images').child(plantName);
    let images = [];
    
    const res = await listRef.listAll();
    for (let item of res.items) {
        const url = await item.getDownloadURL();
        images.push({
            src: url,
            altText: 'image'
        });
    }
    
    return images;
}

// sign in with Google
export const googleProvider = new firebase.auth.GoogleAuthProvider();
googleProvider.setCustomParameters({ prompt: 'select_account' });
export const signInWithGoogle = () => auth.signInWithPopup(googleProvider);

export default firebase;
